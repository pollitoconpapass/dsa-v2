There are various ways of representing graphs through (C++) code. 
Here will be listed some of them...

1. Adjacency Matrix
Represents a graph as a matrix of bolean values (0 and 1s). A finite graph can be represented in the form of a square matrix on a 
computer, where the boolean value of the matrix indicates if there is a direct path between two vertices (nodes).

(Let's assume the nxn matrix as adj[n][n])
    - If there is an edge from vertex i to j, mark adj[i][j] as 1 
    - If there is no edge from vertex i to j, mark adj[i][j] as 0

Time Complexity
- Find Node in graph
- Find all adjacent nodes of a node
- Check if 2 nodes are connected

Space Complexity: O(n^2)

2. Adjacency list
We use an array of a list to represent a graph. The size of the array is equal to the number of vertices (nodes).
Let the array be an array[]. An entry array[i] represents the list of vertices adjacent to the ith vertex.

Ex:
node a (0) -> {1, 2}  // node a has connection with node of index 1 and 2 (which are b and c)
node b (1) -> {0, 2, 3, 4}
node c (2) -> {0, 1, 5}
node d (3) -> {1, 4}
node e (4) -> {1, 3, 5}
node f (5) -> {2, 4}

Time Complexity
- Find all adjacent nodes
- Check if two nodes are connected

Space Complexity: O(e) // e -> nÂ° of edges (links)