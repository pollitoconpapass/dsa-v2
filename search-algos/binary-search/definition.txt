Binary Search Algorithms

WORKING:
1. Search a sorted array by repeatedly dividing the search interval in half.
2. Begin with an interval covering the whole array.
3. If the value the passed as argumnt is less than the item in the middle of the interval, narrow the interval to the lower half.
4. Otherwise narrow it to the upper part.
5. Repeatedly check until the value is found or the interval is empty.

PSEUDOCODE:(remember that the list is sorted) 
- Compare x with the middle element.
- If x matches with middle element, we return the mid index.
- else if x is greater than the middle element, then x can only lie in right half subarray. 
- Else (x is smaller) then, recur for the left half.

(The idea of a Binary Search Algorithm is to reduce the time complexity to O(log n))


EXAMPLE:
We're gonna search for 75... (arrSize = 9)

| 1 | 3 | 12 | 14 | 23 | 34 | 55 | 65 | 75 | 78 |
                    |
                    |-> middle element

1. We calculate the middle element. 
    middle = firstIndex + (lastIndex - firstIndex / 2) = 0 + (9 - 0 / 2) = 4.5 = 4

2. Compare the mid element to the num to search.
    mid element = 23
    value to search = 75

3. As its greater than, we will stay with the right side of the array.
    | 34 | 55 | 65 | 75 | 78 |

4. Repeat the story until mid value is equal to the num to search...

- Middle element (in the new array) = 65
- 75 == 65?  NO. 75 > 65
- Stay with the right side of the array: 

Repeat...
| 75 | 78 |
- Middle element (in the new array) = 75
- 75 == 75? YES!!!

We found the element!


ALGORITHM:
1. take input: array, left, right and num2Search
2. START LOOP: while(left <= right)

    2.1 mid = left + (right - left)/ 2 
        = 0 + (9/2) = 4.5 = 4

    2.2 if(arr[mid] == x){
        retur mid;
    }

    2.3 else if(arr[mid] < x ){
        left = mid + 1; // -> as mid is the position
    }

    2.4 else{
        right = mid -1;
    }

    END LOOP

3. return -1 if the number is not found.
